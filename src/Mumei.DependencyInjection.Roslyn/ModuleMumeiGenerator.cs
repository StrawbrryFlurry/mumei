using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using Mumei.Roslyn.Extensions;


namespace Mumei.DependencyInjection.Roslyn;

[Generator]
public class ModuleMumeiGenerator : IIncrementalGenerator {
  private const string Namespace = "Generators";
  private const string AttributeName = "ReportAttribute";

  public void Initialize(IncrementalGeneratorInitializationContext context) {
    var provider = context.SyntaxProvider
      .CreateSyntaxProvider(
        (s, _) => s is ClassDeclarationSyntax or InterfaceDeclarationSyntax,
        (ctx, _) => GetClassDeclarationForSourceGen(ctx))
      .Where(t => t.isModuleDeclaration)
      .Select((t, _) => t.Item1);

    context.RegisterSourceOutput(context.CompilationProvider.Combine(provider.Collect()),
      (ctx, t) => GenerateCode(ctx, t.Left, t.Right));
  }

  private static (TypeDeclarationSyntax moduleDeclaration, bool isModuleDeclaration) GetClassDeclarationForSourceGen(
    GeneratorSyntaxContext context
  ) {
    var typeDeclarationSyntax = (TypeDeclarationSyntax)context.Node;
    return typeDeclarationSyntax.HasAttribute(context.SemanticModel, AttributeName, out _)
      ? (typeDeclarationSyntax, true)
      : (typeDeclarationSyntax, false);
  }

  private static void GenerateCode(
    SourceProductionContext context,
    Compilation compilation,
    ImmutableArray<TypeDeclarationSyntax> moduleDeclarations
  ) {
    foreach (var classDeclarationSyntax in moduleDeclarations) {
      if (!compilation.TryGetTypeSymbol(classDeclarationSyntax, out var classSymbol)) {
        continue;
      }

      var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();

      var className = classDeclarationSyntax.Identifier.Text;

      var methodBody = classSymbol.GetMembers()
        .OfType<IPropertySymbol>()
        .Select(p =>
          $$"""        yield return $"{{p.Name}}:{this.{{p.Name}}}";"""); // e.g. yield return $"Id:{this.Id}";

      var code = $$"""
                   // <auto-generated/>

                   using System;
                   using System.Collections.Generic;

                   namespace {{namespaceName}};

                   partial class {{className}}
                   {
                       public IEnumerable<string> Report()
                       {
                   {{string.Join("\n", methodBody)}}
                       }
                   }

                   """;

      context.AddSource($"{className}.g.cs", SourceText.From(code, Encoding.UTF8));
    }
  }
}